<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="726" onload="init(evt)" viewBox="0 0 1200 726" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="726" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="709.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="709.00"> </text><svg id="frames" x="10" width="1180" total_samples="31481"><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (331 samples, 1.05%)</title><rect x="0.0000%" y="181" width="1.0514%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="331"/><text x="0.2500%" y="191.50"></text></g><g><title>core::ops::function::FnOnce::call_once (420 samples, 1.33%)</title><rect x="0.0000%" y="197" width="1.3341%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="420"/><text x="0.2500%" y="207.50"></text></g><g><title>core::cmp::Ord::min (1,264 samples, 4.02%)</title><rect x="0.0000%" y="229" width="4.0151%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1264"/><text x="0.2500%" y="239.50">core..</text></g><g><title>core::cmp::min_by (1,264 samples, 4.02%)</title><rect x="0.0000%" y="213" width="4.0151%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1264"/><text x="0.2500%" y="223.50">core..</text></g><g><title>textdistance::algorithms::damerau_levenshtein::min4 (1,300 samples, 4.13%)</title><rect x="0.0000%" y="245" width="4.1295%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1300"/><text x="0.2500%" y="255.50">text..</text></g><g><title>core::core_arch::simd::i8x16::new (28 samples, 0.09%)</title><rect x="4.1390%" y="85" width="0.0889%" height="15" fill="rgb(232,128,0)" fg:x="1303" fg:w="28"/><text x="4.3890%" y="95.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (201 samples, 0.64%)</title><rect x="4.1390%" y="117" width="0.6385%" height="15" fill="rgb(207,160,47)" fg:x="1303" fg:w="201"/><text x="4.3890%" y="127.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (201 samples, 0.64%)</title><rect x="4.1390%" y="101" width="0.6385%" height="15" fill="rgb(228,23,34)" fg:x="1303" fg:w="201"/><text x="4.3890%" y="111.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (19 samples, 0.06%)</title><rect x="4.7775%" y="101" width="0.0604%" height="15" fill="rgb(218,30,26)" fg:x="1504" fg:w="19"/><text x="5.0275%" y="111.50"></text></g><g><title>core::core_arch::simd::i8x16::splat (34 samples, 0.11%)</title><rect x="4.8378%" y="101" width="0.1080%" height="15" fill="rgb(220,122,19)" fg:x="1523" fg:w="34"/><text x="5.0878%" y="111.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (322 samples, 1.02%)</title><rect x="4.7775%" y="117" width="1.0228%" height="15" fill="rgb(250,228,42)" fg:x="1504" fg:w="322"/><text x="5.0275%" y="127.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (43 samples, 0.14%)</title><rect x="5.8003%" y="101" width="0.1366%" height="15" fill="rgb(240,193,28)" fg:x="1826" fg:w="43"/><text x="6.0503%" y="111.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (155 samples, 0.49%)</title><rect x="5.8003%" y="117" width="0.4924%" height="15" fill="rgb(216,20,37)" fg:x="1826" fg:w="155"/><text x="6.0503%" y="127.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (790 samples, 2.51%)</title><rect x="4.1390%" y="133" width="2.5095%" height="15" fill="rgb(206,188,39)" fg:x="1303" fg:w="790"/><text x="4.3890%" y="143.50">ha..</text></g><g><title>hashbrown::raw::sse2::Group::match_empty (846 samples, 2.69%)</title><rect x="4.1390%" y="149" width="2.6873%" height="15" fill="rgb(217,207,13)" fg:x="1303" fg:w="846"/><text x="4.3890%" y="159.50">ha..</text></g><g><title>core::core_arch::simd::i8x16::new (132 samples, 0.42%)</title><rect x="6.8263%" y="101" width="0.4193%" height="15" fill="rgb(231,73,38)" fg:x="2149" fg:w="132"/><text x="7.0763%" y="111.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (863 samples, 2.74%)</title><rect x="6.8263%" y="133" width="2.7413%" height="15" fill="rgb(225,20,46)" fg:x="2149" fg:w="863"/><text x="7.0763%" y="143.50">co..</text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (863 samples, 2.74%)</title><rect x="6.8263%" y="117" width="2.7413%" height="15" fill="rgb(210,31,41)" fg:x="2149" fg:w="863"/><text x="7.0763%" y="127.50">co..</text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (30 samples, 0.10%)</title><rect x="9.5677%" y="117" width="0.0953%" height="15" fill="rgb(221,200,47)" fg:x="3012" fg:w="30"/><text x="9.8177%" y="127.50"></text></g><g><title>core::core_arch::simd::i8x16::splat (142 samples, 0.45%)</title><rect x="9.6630%" y="117" width="0.4511%" height="15" fill="rgb(226,26,5)" fg:x="3042" fg:w="142"/><text x="9.9130%" y="127.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1,185 samples, 3.76%)</title><rect x="9.5677%" y="133" width="3.7642%" height="15" fill="rgb(249,33,26)" fg:x="3012" fg:w="1185"/><text x="9.8177%" y="143.50">core..</text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (109 samples, 0.35%)</title><rect x="13.3319%" y="117" width="0.3462%" height="15" fill="rgb(235,183,28)" fg:x="4197" fg:w="109"/><text x="13.5819%" y="127.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (453 samples, 1.44%)</title><rect x="13.3319%" y="133" width="1.4390%" height="15" fill="rgb(221,5,38)" fg:x="4197" fg:w="453"/><text x="13.5819%" y="143.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (3,113 samples, 9.89%)</title><rect x="6.8263%" y="149" width="9.8885%" height="15" fill="rgb(247,18,42)" fg:x="2149" fg:w="3113"/><text x="7.0763%" y="159.50">hashbrown::raw..</text></g><g><title>core::intrinsics::copy_nonoverlapping (45 samples, 0.14%)</title><rect x="16.7148%" y="117" width="0.1429%" height="15" fill="rgb(241,131,45)" fg:x="5262" fg:w="45"/><text x="16.9648%" y="127.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1,593 samples, 5.06%)</title><rect x="16.7148%" y="133" width="5.0602%" height="15" fill="rgb(249,31,29)" fg:x="5262" fg:w="1593"/><text x="16.9648%" y="143.50">core::..</text></g><g><title>hashbrown::raw::sse2::Group::load (1,743 samples, 5.54%)</title><rect x="16.7148%" y="149" width="5.5367%" height="15" fill="rgb(225,111,53)" fg:x="5262" fg:w="1743"/><text x="16.9648%" y="159.50">hashbro..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (30 samples, 0.10%)</title><rect x="22.2547%" y="149" width="0.0953%" height="15" fill="rgb(238,160,17)" fg:x="7006" fg:w="30"/><text x="22.5047%" y="159.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::ctrl (43 samples, 0.14%)</title><rect x="22.3500%" y="149" width="0.1366%" height="15" fill="rgb(214,148,48)" fg:x="7036" fg:w="43"/><text x="22.6000%" y="159.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (43 samples, 0.14%)</title><rect x="22.3500%" y="133" width="0.1366%" height="15" fill="rgb(232,36,49)" fg:x="7036" fg:w="43"/><text x="22.6000%" y="143.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::data_end (30 samples, 0.10%)</title><rect x="22.4866%" y="117" width="0.0953%" height="15" fill="rgb(209,103,24)" fg:x="7079" fg:w="30"/><text x="22.7366%" y="127.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (27 samples, 0.09%)</title><rect x="22.5819%" y="101" width="0.0858%" height="15" fill="rgb(229,88,8)" fg:x="7109" fg:w="27"/><text x="22.8319%" y="111.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (44 samples, 0.14%)</title><rect x="22.6676%" y="101" width="0.1398%" height="15" fill="rgb(213,181,19)" fg:x="7136" fg:w="44"/><text x="22.9176%" y="111.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_neg (44 samples, 0.14%)</title><rect x="22.6676%" y="85" width="0.1398%" height="15" fill="rgb(254,191,54)" fg:x="7136" fg:w="44"/><text x="22.9176%" y="95.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_sub (44 samples, 0.14%)</title><rect x="22.6676%" y="69" width="0.1398%" height="15" fill="rgb(241,83,37)" fg:x="7136" fg:w="44"/><text x="22.9176%" y="79.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (142 samples, 0.45%)</title><rect x="22.5819%" y="117" width="0.4511%" height="15" fill="rgb(233,36,39)" fg:x="7109" fg:w="142"/><text x="22.8319%" y="127.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (173 samples, 0.55%)</title><rect x="22.4866%" y="133" width="0.5495%" height="15" fill="rgb(226,3,54)" fg:x="7079" fg:w="173"/><text x="22.7366%" y="143.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (26 samples, 0.08%)</title><rect x="23.0361%" y="101" width="0.0826%" height="15" fill="rgb(245,192,40)" fg:x="7252" fg:w="26"/><text x="23.2861%" y="111.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (34 samples, 0.11%)</title><rect x="23.1187%" y="85" width="0.1080%" height="15" fill="rgb(238,167,29)" fg:x="7278" fg:w="34"/><text x="23.3687%" y="95.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (62 samples, 0.20%)</title><rect x="23.1187%" y="101" width="0.1969%" height="15" fill="rgb(232,182,51)" fg:x="7278" fg:w="62"/><text x="23.3687%" y="111.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_neg (28 samples, 0.09%)</title><rect x="23.2267%" y="85" width="0.0889%" height="15" fill="rgb(231,60,39)" fg:x="7312" fg:w="28"/><text x="23.4767%" y="95.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_sub (28 samples, 0.09%)</title><rect x="23.2267%" y="69" width="0.0889%" height="15" fill="rgb(208,69,12)" fg:x="7312" fg:w="28"/><text x="23.4767%" y="79.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (136 samples, 0.43%)</title><rect x="23.0361%" y="117" width="0.4320%" height="15" fill="rgb(235,93,37)" fg:x="7252" fg:w="136"/><text x="23.2861%" y="127.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (137 samples, 0.44%)</title><rect x="23.0361%" y="133" width="0.4352%" height="15" fill="rgb(213,116,39)" fg:x="7252" fg:w="137"/><text x="23.2861%" y="143.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for char&gt;::eq (85 samples, 0.27%)</title><rect x="23.4713%" y="69" width="0.2700%" height="15" fill="rgb(222,207,29)" fg:x="7389" fg:w="85"/><text x="23.7213%" y="79.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (153 samples, 0.49%)</title><rect x="23.4713%" y="85" width="0.4860%" height="15" fill="rgb(206,96,30)" fg:x="7389" fg:w="153"/><text x="23.7213%" y="95.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (178 samples, 0.57%)</title><rect x="23.4713%" y="101" width="0.5654%" height="15" fill="rgb(218,138,4)" fg:x="7389" fg:w="178"/><text x="23.7213%" y="111.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (233 samples, 0.74%)</title><rect x="23.4713%" y="117" width="0.7401%" height="15" fill="rgb(250,191,14)" fg:x="7389" fg:w="233"/><text x="23.7213%" y="127.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (268 samples, 0.85%)</title><rect x="23.4713%" y="133" width="0.8513%" height="15" fill="rgb(239,60,40)" fg:x="7389" fg:w="268"/><text x="23.7213%" y="143.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (606 samples, 1.92%)</title><rect x="22.4866%" y="149" width="1.9250%" height="15" fill="rgb(206,27,48)" fg:x="7079" fg:w="606"/><text x="22.7366%" y="159.50">h..</text></g><g><title>hashbrown::raw::ProbeSeq::move_next (6 samples, 0.02%)</title><rect x="24.4115%" y="149" width="0.0191%" height="15" fill="rgb(225,35,8)" fg:x="7685" fg:w="6"/><text x="24.6615%" y="159.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::remove_lowest_bit (22 samples, 0.07%)</title><rect x="24.4306%" y="133" width="0.0699%" height="15" fill="rgb(250,213,24)" fg:x="7691" fg:w="22"/><text x="24.6806%" y="143.50"></text></g><g><title>core::num::nonzero::NonZeroU16::trailing_zeros (173 samples, 0.55%)</title><rect x="24.5005%" y="101" width="0.5495%" height="15" fill="rgb(247,123,22)" fg:x="7713" fg:w="173"/><text x="24.7505%" y="111.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (210 samples, 0.67%)</title><rect x="24.5005%" y="117" width="0.6671%" height="15" fill="rgb(231,138,38)" fg:x="7713" fg:w="210"/><text x="24.7505%" y="127.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (506 samples, 1.61%)</title><rect x="25.1676%" y="117" width="1.6073%" height="15" fill="rgb(231,145,46)" fg:x="7923" fg:w="506"/><text x="25.4176%" y="127.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1,018 samples, 3.23%)</title><rect x="24.5005%" y="133" width="3.2337%" height="15" fill="rgb(251,118,11)" fg:x="7713" fg:w="1018"/><text x="24.7505%" y="143.50">has..</text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (63 samples, 0.20%)</title><rect x="27.7342%" y="133" width="0.2001%" height="15" fill="rgb(217,147,25)" fg:x="8731" fg:w="63"/><text x="27.9842%" y="143.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1,353 samples, 4.30%)</title><rect x="24.4306%" y="149" width="4.2978%" height="15" fill="rgb(247,81,37)" fg:x="7691" fg:w="1353"/><text x="24.6806%" y="159.50">&lt;hash..</text></g><g><title>&lt;hashbrown::raw::bitmask::BitMask as core::iter::traits::collect::IntoIterator&gt;::into_iter (171 samples, 0.54%)</title><rect x="28.7284%" y="149" width="0.5432%" height="15" fill="rgb(209,12,38)" fg:x="9044" fg:w="171"/><text x="28.9784%" y="159.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (8,899 samples, 28.27%)</title><rect x="4.1390%" y="165" width="28.2678%" height="15" fill="rgb(227,1,9)" fg:x="1303" fg:w="8899"/><text x="4.3890%" y="175.50">hashbrown::raw::RawTableInner&lt;A&gt;::find_inner</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::data_end (21 samples, 0.07%)</title><rect x="32.4068%" y="149" width="0.0667%" height="15" fill="rgb(248,47,43)" fg:x="10202" fg:w="21"/><text x="32.6568%" y="159.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (16 samples, 0.05%)</title><rect x="32.4736%" y="133" width="0.0508%" height="15" fill="rgb(221,10,30)" fg:x="10223" fg:w="16"/><text x="32.7236%" y="143.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (36 samples, 0.11%)</title><rect x="32.5244%" y="133" width="0.1144%" height="15" fill="rgb(210,229,1)" fg:x="10239" fg:w="36"/><text x="32.7744%" y="143.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_neg (36 samples, 0.11%)</title><rect x="32.5244%" y="117" width="0.1144%" height="15" fill="rgb(222,148,37)" fg:x="10239" fg:w="36"/><text x="32.7744%" y="127.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_sub (36 samples, 0.11%)</title><rect x="32.5244%" y="101" width="0.1144%" height="15" fill="rgb(234,67,33)" fg:x="10239" fg:w="36"/><text x="32.7744%" y="111.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (138 samples, 0.44%)</title><rect x="32.4068%" y="165" width="0.4384%" height="15" fill="rgb(247,98,35)" fg:x="10202" fg:w="138"/><text x="32.6568%" y="175.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (117 samples, 0.37%)</title><rect x="32.4736%" y="149" width="0.3717%" height="15" fill="rgb(247,138,52)" fg:x="10223" fg:w="117"/><text x="32.7236%" y="159.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (9,193 samples, 29.20%)</title><rect x="4.1390%" y="181" width="29.2017%" height="15" fill="rgb(213,79,30)" fg:x="1303" fg:w="9193"/><text x="4.3890%" y="191.50">hashbrown::raw::RawTable&lt;T,A&gt;::find</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (16 samples, 0.05%)</title><rect x="33.3407%" y="133" width="0.0508%" height="15" fill="rgb(246,177,23)" fg:x="10496" fg:w="16"/><text x="33.5907%" y="143.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_sub (15 samples, 0.05%)</title><rect x="33.3916%" y="117" width="0.0476%" height="15" fill="rgb(230,62,27)" fg:x="10512" fg:w="15"/><text x="33.6416%" y="127.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (32 samples, 0.10%)</title><rect x="33.3407%" y="149" width="0.1016%" height="15" fill="rgb(216,154,8)" fg:x="10496" fg:w="32"/><text x="33.5907%" y="159.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_neg (16 samples, 0.05%)</title><rect x="33.3916%" y="133" width="0.0508%" height="15" fill="rgb(244,35,45)" fg:x="10512" fg:w="16"/><text x="33.6416%" y="143.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (79 samples, 0.25%)</title><rect x="33.3407%" y="181" width="0.2509%" height="15" fill="rgb(251,115,12)" fg:x="10496" fg:w="79"/><text x="33.5907%" y="191.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (79 samples, 0.25%)</title><rect x="33.3407%" y="165" width="0.2509%" height="15" fill="rgb(240,54,50)" fg:x="10496" fg:w="79"/><text x="33.5907%" y="175.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (9,375 samples, 29.78%)</title><rect x="4.1390%" y="197" width="29.7799%" height="15" fill="rgb(233,84,52)" fg:x="1303" fg:w="9375"/><text x="4.3890%" y="207.50">hashbrown::raw::RawTable&lt;T,A&gt;::get</text></g><g><title>core::num::&lt;impl u32&gt;::to_ne_bytes (36 samples, 0.11%)</title><rect x="33.9189%" y="101" width="0.1144%" height="15" fill="rgb(207,117,47)" fg:x="10678" fg:w="36"/><text x="34.1689%" y="111.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (20 samples, 0.06%)</title><rect x="34.0332%" y="53" width="0.0635%" height="15" fill="rgb(249,43,39)" fg:x="10714" fg:w="20"/><text x="34.2832%" y="63.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::as_ptr (32 samples, 0.10%)</title><rect x="34.0968%" y="37" width="0.1016%" height="15" fill="rgb(209,38,44)" fg:x="10734" fg:w="32"/><text x="34.3468%" y="47.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (28 samples, 0.09%)</title><rect x="34.1984%" y="37" width="0.0889%" height="15" fill="rgb(236,212,23)" fg:x="10766" fg:w="28"/><text x="34.4484%" y="47.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (57 samples, 0.18%)</title><rect x="34.2873%" y="37" width="0.1811%" height="15" fill="rgb(242,79,21)" fg:x="10794" fg:w="57"/><text x="34.5373%" y="47.50"></text></g><g><title>core::hash::sip::u8to64_le (410 samples, 1.30%)</title><rect x="34.0968%" y="53" width="1.3024%" height="15" fill="rgb(211,96,35)" fg:x="10734" fg:w="410"/><text x="34.3468%" y="63.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (711 samples, 2.26%)</title><rect x="34.0332%" y="85" width="2.2585%" height="15" fill="rgb(253,215,40)" fg:x="10714" fg:w="711"/><text x="34.2832%" y="95.50">&lt;..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (711 samples, 2.26%)</title><rect x="34.0332%" y="69" width="2.2585%" height="15" fill="rgb(211,81,21)" fg:x="10714" fg:w="711"/><text x="34.2832%" y="79.50">&lt;..</text></g><g><title>core::hash::Hasher::write_u32 (779 samples, 2.47%)</title><rect x="33.9189%" y="117" width="2.4745%" height="15" fill="rgb(208,190,38)" fg:x="10678" fg:w="779"/><text x="34.1689%" y="127.50">co..</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (743 samples, 2.36%)</title><rect x="34.0332%" y="101" width="2.3602%" height="15" fill="rgb(235,213,38)" fg:x="10714" fg:w="743"/><text x="34.2832%" y="111.50">&lt;s..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for char&gt;::hash (828 samples, 2.63%)</title><rect x="33.9189%" y="133" width="2.6302%" height="15" fill="rgb(237,122,38)" fg:x="10678" fg:w="828"/><text x="34.1689%" y="143.50">co..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (850 samples, 2.70%)</title><rect x="33.9189%" y="149" width="2.7000%" height="15" fill="rgb(244,218,35)" fg:x="10678" fg:w="850"/><text x="34.1689%" y="159.50">co..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (885 samples, 2.81%)</title><rect x="33.9189%" y="165" width="2.8112%" height="15" fill="rgb(240,68,47)" fg:x="10678" fg:w="885"/><text x="34.1689%" y="175.50">co..</text></g><g><title>memcpy@plt (23 samples, 0.07%)</title><rect x="36.7301%" y="149" width="0.0731%" height="15" fill="rgb(210,16,53)" fg:x="11563" fg:w="23"/><text x="36.9801%" y="159.50"></text></g><g><title>memcpy@plt (33 samples, 0.10%)</title><rect x="36.8032%" y="133" width="0.1048%" height="15" fill="rgb(235,124,12)" fg:x="11586" fg:w="33"/><text x="37.0532%" y="143.50"></text></g><g><title>memcpy@plt (21 samples, 0.07%)</title><rect x="36.9080%" y="117" width="0.0667%" height="15" fill="rgb(224,169,11)" fg:x="11619" fg:w="21"/><text x="37.1580%" y="127.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (94 samples, 0.30%)</title><rect x="36.9747%" y="117" width="0.2986%" height="15" fill="rgb(250,166,2)" fg:x="11640" fg:w="94"/><text x="37.2247%" y="127.50"></text></g><g><title>[libc.so.6] (791 samples, 2.51%)</title><rect x="37.2733%" y="117" width="2.5126%" height="15" fill="rgb(242,216,29)" fg:x="11734" fg:w="791"/><text x="37.5233%" y="127.50">[l..</text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (1,043 samples, 3.31%)</title><rect x="36.9080%" y="133" width="3.3131%" height="15" fill="rgb(230,116,27)" fg:x="11619" fg:w="1043"/><text x="37.1580%" y="143.50">cor..</text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (1,598 samples, 5.08%)</title><rect x="36.8032%" y="149" width="5.0761%" height="15" fill="rgb(228,99,48)" fg:x="11586" fg:w="1598"/><text x="37.0532%" y="159.50">core::..</text></g><g><title>[libc.so.6] (522 samples, 1.66%)</title><rect x="40.2211%" y="133" width="1.6581%" height="15" fill="rgb(253,11,6)" fg:x="12662" fg:w="522"/><text x="40.4711%" y="143.50"></text></g><g><title>[libc.so.6] (522 samples, 1.66%)</title><rect x="41.8792%" y="149" width="1.6581%" height="15" fill="rgb(247,143,39)" fg:x="13184" fg:w="522"/><text x="42.1292%" y="159.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (2,204 samples, 7.00%)</title><rect x="36.7301%" y="165" width="7.0010%" height="15" fill="rgb(236,97,10)" fg:x="11563" fg:w="2204"/><text x="36.9801%" y="175.50">&lt;std::col..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (96 samples, 0.30%)</title><rect x="43.7311%" y="101" width="0.3049%" height="15" fill="rgb(233,208,19)" fg:x="13767" fg:w="96"/><text x="43.9811%" y="111.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (432 samples, 1.37%)</title><rect x="44.0361%" y="101" width="1.3723%" height="15" fill="rgb(216,164,2)" fg:x="13863" fg:w="432"/><text x="44.2861%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1,489 samples, 4.73%)</title><rect x="43.7311%" y="117" width="4.7298%" height="15" fill="rgb(220,129,5)" fg:x="13767" fg:w="1489"/><text x="43.9811%" y="127.50">&lt;core:..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (34 samples, 0.11%)</title><rect x="48.4610%" y="101" width="0.1080%" height="15" fill="rgb(242,17,10)" fg:x="15256" fg:w="34"/><text x="48.7110%" y="111.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (164 samples, 0.52%)</title><rect x="48.5690%" y="101" width="0.5209%" height="15" fill="rgb(242,107,0)" fg:x="15290" fg:w="164"/><text x="48.8190%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (625 samples, 1.99%)</title><rect x="48.4610%" y="117" width="1.9853%" height="15" fill="rgb(251,28,31)" fg:x="15256" fg:w="625"/><text x="48.7110%" y="127.50">&lt;..</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (2,278 samples, 7.24%)</title><rect x="43.7311%" y="165" width="7.2361%" height="15" fill="rgb(233,223,10)" fg:x="13767" fg:w="2278"/><text x="43.9811%" y="175.50">&lt;std::coll..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2,278 samples, 7.24%)</title><rect x="43.7311%" y="149" width="7.2361%" height="15" fill="rgb(215,21,27)" fg:x="13767" fg:w="2278"/><text x="43.9811%" y="159.50">&lt;core::has..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2,278 samples, 7.24%)</title><rect x="43.7311%" y="133" width="7.2361%" height="15" fill="rgb(232,23,21)" fg:x="13767" fg:w="2278"/><text x="43.9811%" y="143.50">&lt;core::has..</text></g><g><title>core::hash::BuildHasher::hash_one (5,457 samples, 17.33%)</title><rect x="33.9189%" y="181" width="17.3343%" height="15" fill="rgb(244,5,23)" fg:x="10678" fg:w="5457"/><text x="34.1689%" y="191.50">core::hash::BuildHasher::ha..</text></g><g><title>hashbrown::map::make_hash (5,458 samples, 17.34%)</title><rect x="33.9189%" y="197" width="17.3374%" height="15" fill="rgb(226,81,46)" fg:x="10678" fg:w="5458"/><text x="34.1689%" y="207.50">hashbrown::map::make_hash</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (14,905 samples, 47.35%)</title><rect x="4.1390%" y="213" width="47.3460%" height="15" fill="rgb(247,70,30)" fg:x="1303" fg:w="14905"/><text x="4.3890%" y="223.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (15,000 samples, 47.65%)</title><rect x="4.1390%" y="229" width="47.6478%" height="15" fill="rgb(212,68,19)" fg:x="1303" fg:w="15000"/><text x="4.3890%" y="239.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::get</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (15,022 samples, 47.72%)</title><rect x="4.1390%" y="245" width="47.7177%" height="15" fill="rgb(240,187,13)" fg:x="1303" fg:w="15022"/><text x="4.3890%" y="255.50">std::collections::hash::map::HashMap&lt;K,V,S&gt;::get</text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or (177 samples, 0.56%)</title><rect x="51.8630%" y="245" width="0.5622%" height="15" fill="rgb(223,113,26)" fg:x="16327" fg:w="177"/><text x="52.1130%" y="255.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for char&gt;::eq (60 samples, 0.19%)</title><rect x="52.4253%" y="229" width="0.1906%" height="15" fill="rgb(206,192,2)" fg:x="16504" fg:w="60"/><text x="52.6753%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (100 samples, 0.32%)</title><rect x="52.4253%" y="245" width="0.3177%" height="15" fill="rgb(241,108,4)" fg:x="16504" fg:w="100"/><text x="52.6753%" y="255.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (10 samples, 0.03%)</title><rect x="52.7429%" y="133" width="0.0318%" height="15" fill="rgb(247,173,49)" fg:x="16604" fg:w="10"/><text x="52.9929%" y="143.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (10 samples, 0.03%)</title><rect x="52.7429%" y="117" width="0.0318%" height="15" fill="rgb(224,114,35)" fg:x="16604" fg:w="10"/><text x="52.9929%" y="127.50"></text></g><g><title>[libc.so.6] (10 samples, 0.03%)</title><rect x="52.7429%" y="101" width="0.0318%" height="15" fill="rgb(245,159,27)" fg:x="16604" fg:w="10"/><text x="52.9929%" y="111.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (11 samples, 0.03%)</title><rect x="52.7429%" y="181" width="0.0349%" height="15" fill="rgb(245,172,44)" fg:x="16604" fg:w="11"/><text x="52.9929%" y="191.50"></text></g><g><title>alloc::slice::hack::to_vec (11 samples, 0.03%)</title><rect x="52.7429%" y="165" width="0.0349%" height="15" fill="rgb(236,23,11)" fg:x="16604" fg:w="11"/><text x="52.9929%" y="175.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (11 samples, 0.03%)</title><rect x="52.7429%" y="149" width="0.0349%" height="15" fill="rgb(205,117,38)" fg:x="16604" fg:w="11"/><text x="52.9929%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (12 samples, 0.04%)</title><rect x="52.7429%" y="197" width="0.0381%" height="15" fill="rgb(237,72,25)" fg:x="16604" fg:w="12"/><text x="52.9929%" y="207.50"></text></g><g><title>alloc::vec::from_elem (13 samples, 0.04%)</title><rect x="52.7429%" y="245" width="0.0413%" height="15" fill="rgb(244,70,9)" fg:x="16604" fg:w="13"/><text x="52.9929%" y="255.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (13 samples, 0.04%)</title><rect x="52.7429%" y="229" width="0.0413%" height="15" fill="rgb(217,125,39)" fg:x="16604" fg:w="13"/><text x="52.9929%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (13 samples, 0.04%)</title><rect x="52.7429%" y="213" width="0.0413%" height="15" fill="rgb(235,36,10)" fg:x="16604" fg:w="13"/><text x="52.9929%" y="223.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (43 samples, 0.14%)</title><rect x="52.7842%" y="197" width="0.1366%" height="15" fill="rgb(251,123,47)" fg:x="16617" fg:w="43"/><text x="53.0342%" y="207.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (156 samples, 0.50%)</title><rect x="52.7842%" y="213" width="0.4955%" height="15" fill="rgb(221,13,13)" fg:x="16617" fg:w="156"/><text x="53.0342%" y="223.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_null (10 samples, 0.03%)</title><rect x="53.2798%" y="213" width="0.0318%" height="15" fill="rgb(238,131,9)" fg:x="16773" fg:w="10"/><text x="53.5298%" y="223.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (292 samples, 0.93%)</title><rect x="52.7842%" y="229" width="0.9275%" height="15" fill="rgb(211,50,8)" fg:x="16617" fg:w="292"/><text x="53.0342%" y="239.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (50 samples, 0.16%)</title><rect x="53.7118%" y="229" width="0.1588%" height="15" fill="rgb(245,182,24)" fg:x="16909" fg:w="50"/><text x="53.9618%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (539 samples, 1.71%)</title><rect x="52.7842%" y="245" width="1.7121%" height="15" fill="rgb(242,14,37)" fg:x="16617" fg:w="539"/><text x="53.0342%" y="255.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (197 samples, 0.63%)</title><rect x="54.4964%" y="213" width="0.6258%" height="15" fill="rgb(246,228,12)" fg:x="17156" fg:w="197"/><text x="54.7464%" y="223.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (248 samples, 0.79%)</title><rect x="54.4964%" y="229" width="0.7878%" height="15" fill="rgb(213,55,15)" fg:x="17156" fg:w="248"/><text x="54.7464%" y="239.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (125 samples, 0.40%)</title><rect x="55.2841%" y="197" width="0.3971%" height="15" fill="rgb(209,9,3)" fg:x="17404" fg:w="125"/><text x="55.5341%" y="207.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (124 samples, 0.39%)</title><rect x="55.2873%" y="181" width="0.3939%" height="15" fill="rgb(230,59,30)" fg:x="17405" fg:w="124"/><text x="55.5373%" y="191.50"></text></g><g><title>core::slice::raw::from_raw_parts_mut (179 samples, 0.57%)</title><rect x="55.2841%" y="213" width="0.5686%" height="15" fill="rgb(209,121,21)" fg:x="17404" fg:w="179"/><text x="55.5341%" y="223.50"></text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::as_ptr (50 samples, 0.16%)</title><rect x="55.8527%" y="181" width="0.1588%" height="15" fill="rgb(220,109,13)" fg:x="17583" fg:w="50"/><text x="56.1027%" y="191.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (50 samples, 0.16%)</title><rect x="55.8527%" y="165" width="0.1588%" height="15" fill="rgb(232,18,1)" fg:x="17583" fg:w="50"/><text x="56.1027%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (52 samples, 0.17%)</title><rect x="55.8527%" y="197" width="0.1652%" height="15" fill="rgb(215,41,42)" fg:x="17583" fg:w="52"/><text x="56.1027%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (116 samples, 0.37%)</title><rect x="55.8527%" y="213" width="0.3685%" height="15" fill="rgb(224,123,36)" fg:x="17583" fg:w="116"/><text x="56.1027%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (297 samples, 0.94%)</title><rect x="55.2841%" y="229" width="0.9434%" height="15" fill="rgb(240,125,3)" fg:x="17404" fg:w="297"/><text x="55.5341%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (620 samples, 1.97%)</title><rect x="54.4964%" y="245" width="1.9694%" height="15" fill="rgb(205,98,50)" fg:x="17156" fg:w="620"/><text x="54.7464%" y="255.50">&lt;..</text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (730 samples, 2.32%)</title><rect x="56.4658%" y="213" width="2.3189%" height="15" fill="rgb(205,185,37)" fg:x="17776" fg:w="730"/><text x="56.7158%" y="223.50">&lt;..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (943 samples, 3.00%)</title><rect x="56.4658%" y="229" width="2.9955%" height="15" fill="rgb(238,207,15)" fg:x="17776" fg:w="943"/><text x="56.7158%" y="239.50">cor..</text></g><g><title>core::slice::raw::from_raw_parts::runtime (206 samples, 0.65%)</title><rect x="59.4613%" y="197" width="0.6544%" height="15" fill="rgb(213,199,42)" fg:x="18719" fg:w="206"/><text x="59.7113%" y="207.50"></text></g><g><title>core::intrinsics::is_valid_allocation_size (206 samples, 0.65%)</title><rect x="59.4613%" y="181" width="0.6544%" height="15" fill="rgb(235,201,11)" fg:x="18719" fg:w="206"/><text x="59.7113%" y="191.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (342 samples, 1.09%)</title><rect x="60.1156%" y="181" width="1.0864%" height="15" fill="rgb(207,46,11)" fg:x="18925" fg:w="342"/><text x="60.3656%" y="191.50"></text></g><g><title>core::slice::raw::from_raw_parts (550 samples, 1.75%)</title><rect x="59.4613%" y="213" width="1.7471%" height="15" fill="rgb(241,35,35)" fg:x="18719" fg:w="550"/><text x="59.7113%" y="223.50"></text></g><g><title>core::ptr::slice_from_raw_parts (344 samples, 1.09%)</title><rect x="60.1156%" y="197" width="1.0927%" height="15" fill="rgb(243,32,47)" fg:x="18925" fg:w="344"/><text x="60.3656%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (259 samples, 0.82%)</title><rect x="61.2083%" y="213" width="0.8227%" height="15" fill="rgb(247,202,23)" fg:x="19269" fg:w="259"/><text x="61.4583%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (259 samples, 0.82%)</title><rect x="61.2083%" y="197" width="0.8227%" height="15" fill="rgb(219,102,11)" fg:x="19269" fg:w="259"/><text x="61.4583%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (992 samples, 3.15%)</title><rect x="59.4613%" y="229" width="3.1511%" height="15" fill="rgb(243,110,44)" fg:x="18719" fg:w="992"/><text x="59.7113%" y="239.50">&lt;al..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2,271 samples, 7.21%)</title><rect x="56.4658%" y="245" width="7.2139%" height="15" fill="rgb(222,74,54)" fg:x="17776" fg:w="2271"/><text x="56.7158%" y="255.50">&lt;alloc::ve..</text></g><g><title>_start (26,850 samples, 85.29%)</title><rect x="0.0000%" y="645" width="85.2895%" height="15" fill="rgb(216,99,12)" fg:x="0" fg:w="26850"/><text x="0.2500%" y="655.50">_start</text></g><g><title>__libc_start_main (26,850 samples, 85.29%)</title><rect x="0.0000%" y="629" width="85.2895%" height="15" fill="rgb(226,22,26)" fg:x="0" fg:w="26850"/><text x="0.2500%" y="639.50">__libc_start_main</text></g><g><title>[libc.so.6] (26,850 samples, 85.29%)</title><rect x="0.0000%" y="613" width="85.2895%" height="15" fill="rgb(217,163,10)" fg:x="0" fg:w="26850"/><text x="0.2500%" y="623.50">[libc.so.6]</text></g><g><title>main (26,850 samples, 85.29%)</title><rect x="0.0000%" y="597" width="85.2895%" height="15" fill="rgb(213,25,53)" fg:x="0" fg:w="26850"/><text x="0.2500%" y="607.50">main</text></g><g><title>std::rt::lang_start (26,850 samples, 85.29%)</title><rect x="0.0000%" y="581" width="85.2895%" height="15" fill="rgb(252,105,26)" fg:x="0" fg:w="26850"/><text x="0.2500%" y="591.50">std::rt::lang_start</text></g><g><title>std::rt::lang_start_internal (26,850 samples, 85.29%)</title><rect x="0.0000%" y="565" width="85.2895%" height="15" fill="rgb(220,39,43)" fg:x="0" fg:w="26850"/><text x="0.2500%" y="575.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (26,850 samples, 85.29%)</title><rect x="0.0000%" y="549" width="85.2895%" height="15" fill="rgb(229,68,48)" fg:x="0" fg:w="26850"/><text x="0.2500%" y="559.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (26,850 samples, 85.29%)</title><rect x="0.0000%" y="533" width="85.2895%" height="15" fill="rgb(252,8,32)" fg:x="0" fg:w="26850"/><text x="0.2500%" y="543.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (26,850 samples, 85.29%)</title><rect x="0.0000%" y="517" width="85.2895%" height="15" fill="rgb(223,20,43)" fg:x="0" fg:w="26850"/><text x="0.2500%" y="527.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (26,850 samples, 85.29%)</title><rect x="0.0000%" y="501" width="85.2895%" height="15" fill="rgb(229,81,49)" fg:x="0" fg:w="26850"/><text x="0.2500%" y="511.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (26,850 samples, 85.29%)</title><rect x="0.0000%" y="485" width="85.2895%" height="15" fill="rgb(236,28,36)" fg:x="0" fg:w="26850"/><text x="0.2500%" y="495.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (26,850 samples, 85.29%)</title><rect x="0.0000%" y="469" width="85.2895%" height="15" fill="rgb(249,185,26)" fg:x="0" fg:w="26850"/><text x="0.2500%" y="479.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (26,850 samples, 85.29%)</title><rect x="0.0000%" y="453" width="85.2895%" height="15" fill="rgb(249,174,33)" fg:x="0" fg:w="26850"/><text x="0.2500%" y="463.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (26,850 samples, 85.29%)</title><rect x="0.0000%" y="437" width="85.2895%" height="15" fill="rgb(233,201,37)" fg:x="0" fg:w="26850"/><text x="0.2500%" y="447.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (26,850 samples, 85.29%)</title><rect x="0.0000%" y="421" width="85.2895%" height="15" fill="rgb(221,78,26)" fg:x="0" fg:w="26850"/><text x="0.2500%" y="431.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (26,850 samples, 85.29%)</title><rect x="0.0000%" y="405" width="85.2895%" height="15" fill="rgb(250,127,30)" fg:x="0" fg:w="26850"/><text x="0.2500%" y="415.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (26,850 samples, 85.29%)</title><rect x="0.0000%" y="389" width="85.2895%" height="15" fill="rgb(230,49,44)" fg:x="0" fg:w="26850"/><text x="0.2500%" y="399.50">core::ops::function::FnOnce::call_once</text></g><g><title>duplicate_detector::main (26,850 samples, 85.29%)</title><rect x="0.0000%" y="373" width="85.2895%" height="15" fill="rgb(229,67,23)" fg:x="0" fg:w="26850"/><text x="0.2500%" y="383.50">duplicate_detector::main</text></g><g><title>duplicate_detector::controller::run (26,850 samples, 85.29%)</title><rect x="0.0000%" y="357" width="85.2895%" height="15" fill="rgb(249,83,47)" fg:x="0" fg:w="26850"/><text x="0.2500%" y="367.50">duplicate_detector::controller::run</text></g><g><title>duplicate_detector::processor::Detector::compute_ratio (26,850 samples, 85.29%)</title><rect x="0.0000%" y="341" width="85.2895%" height="15" fill="rgb(215,43,3)" fg:x="0" fg:w="26850"/><text x="0.2500%" y="351.50">duplicate_detector::processor::Detector::compute_ratio</text></g><g><title>textdistance::nstr::damerau_levenshtein (26,850 samples, 85.29%)</title><rect x="0.0000%" y="325" width="85.2895%" height="15" fill="rgb(238,154,13)" fg:x="0" fg:w="26850"/><text x="0.2500%" y="335.50">textdistance::nstr::damerau_levenshtein</text></g><g><title>textdistance::algorithm::Algorithm::for_str (26,850 samples, 85.29%)</title><rect x="0.0000%" y="309" width="85.2895%" height="15" fill="rgb(219,56,2)" fg:x="0" fg:w="26850"/><text x="0.2500%" y="319.50">textdistance::algorithm::Algorithm::for_str</text></g><g><title>textdistance::algorithm::Algorithm::for_iter (26,850 samples, 85.29%)</title><rect x="0.0000%" y="293" width="85.2895%" height="15" fill="rgb(233,0,4)" fg:x="0" fg:w="26850"/><text x="0.2500%" y="303.50">textdistance::algorithm::Algorithm::for_iter</text></g><g><title>&lt;textdistance::algorithms::damerau_levenshtein::DamerauLevenshtein as textdistance::algorithm::Algorithm&lt;usize&gt;&gt;::for_vec (26,850 samples, 85.29%)</title><rect x="0.0000%" y="277" width="85.2895%" height="15" fill="rgb(235,30,7)" fg:x="0" fg:w="26850"/><text x="0.2500%" y="287.50">&lt;textdistance::algorithms::damerau_levenshtein::DamerauLevenshtein as textdistance::algorithm::Algorithm&lt;usize&gt;&gt;::for_vec</text></g><g><title>textdistance::algorithms::damerau_levenshtein::DamerauLevenshtein::get_unrestricted (26,850 samples, 85.29%)</title><rect x="0.0000%" y="261" width="85.2895%" height="15" fill="rgb(250,79,13)" fg:x="0" fg:w="26850"/><text x="0.2500%" y="271.50">textdistance::algorithms::damerau_levenshtein::DamerauLevenshtein::get_unrestricted</text></g><g><title>textdistance::algorithms::damerau_levenshtein::min4 (160 samples, 0.51%)</title><rect x="85.2895%" y="629" width="0.5082%" height="15" fill="rgb(211,146,34)" fg:x="26850" fg:w="160"/><text x="85.5395%" y="639.50"></text></g><g><title>textdistance::algorithms::damerau_levenshtein::DamerauLevenshtein::get_unrestricted (511 samples, 1.62%)</title><rect x="85.7978%" y="629" width="1.6232%" height="15" fill="rgb(228,22,38)" fg:x="27010" fg:w="511"/><text x="86.0478%" y="639.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (37 samples, 0.12%)</title><rect x="87.4242%" y="629" width="0.1175%" height="15" fill="rgb(235,168,5)" fg:x="27522" fg:w="37"/><text x="87.6742%" y="639.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (6 samples, 0.02%)</title><rect x="87.5449%" y="597" width="0.0191%" height="15" fill="rgb(221,155,16)" fg:x="27560" fg:w="6"/><text x="87.7949%" y="607.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (24 samples, 0.08%)</title><rect x="87.5639%" y="597" width="0.0762%" height="15" fill="rgb(215,215,53)" fg:x="27566" fg:w="24"/><text x="87.8139%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (124 samples, 0.39%)</title><rect x="87.5449%" y="629" width="0.3939%" height="15" fill="rgb(223,4,10)" fg:x="27560" fg:w="124"/><text x="87.7949%" y="639.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (124 samples, 0.39%)</title><rect x="87.5449%" y="613" width="0.3939%" height="15" fill="rgb(234,103,6)" fg:x="27560" fg:w="124"/><text x="87.7949%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (106 samples, 0.34%)</title><rect x="87.9388%" y="629" width="0.3367%" height="15" fill="rgb(227,97,0)" fg:x="27684" fg:w="106"/><text x="88.1888%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (27 samples, 0.09%)</title><rect x="88.2755%" y="629" width="0.0858%" height="15" fill="rgb(234,150,53)" fg:x="27790" fg:w="27"/><text x="88.5255%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (24 samples, 0.08%)</title><rect x="88.3612%" y="629" width="0.0762%" height="15" fill="rgb(228,201,54)" fg:x="27817" fg:w="24"/><text x="88.6112%" y="639.50"></text></g><g><title>hashbrown::map::make_hash (14 samples, 0.04%)</title><rect x="88.4406%" y="613" width="0.0445%" height="15" fill="rgb(222,22,37)" fg:x="27842" fg:w="14"/><text x="88.6906%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (41 samples, 0.13%)</title><rect x="88.4406%" y="629" width="0.1302%" height="15" fill="rgb(237,53,32)" fg:x="27842" fg:w="41"/><text x="88.6906%" y="639.50"></text></g><g><title>core::ops::function::FnOnce::call_once (197 samples, 0.63%)</title><rect x="88.5709%" y="629" width="0.6258%" height="15" fill="rgb(233,25,53)" fg:x="27883" fg:w="197"/><text x="88.8209%" y="639.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for char&gt;::hash (41 samples, 0.13%)</title><rect x="89.1967%" y="629" width="0.1302%" height="15" fill="rgb(210,40,34)" fg:x="28080" fg:w="41"/><text x="89.4467%" y="639.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (37 samples, 0.12%)</title><rect x="89.3269%" y="629" width="0.1175%" height="15" fill="rgb(241,220,44)" fg:x="28121" fg:w="37"/><text x="89.5769%" y="639.50"></text></g><g><title>core::hash::Hasher::write_u32 (17 samples, 0.05%)</title><rect x="89.4444%" y="629" width="0.0540%" height="15" fill="rgb(235,28,35)" fg:x="28158" fg:w="17"/><text x="89.6944%" y="639.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (44 samples, 0.14%)</title><rect x="89.4984%" y="629" width="0.1398%" height="15" fill="rgb(210,56,17)" fg:x="28175" fg:w="44"/><text x="89.7484%" y="639.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (28 samples, 0.09%)</title><rect x="89.6382%" y="629" width="0.0889%" height="15" fill="rgb(224,130,29)" fg:x="28219" fg:w="28"/><text x="89.8882%" y="639.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (29 samples, 0.09%)</title><rect x="89.7271%" y="629" width="0.0921%" height="15" fill="rgb(235,212,8)" fg:x="28247" fg:w="29"/><text x="89.9771%" y="639.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (40 samples, 0.13%)</title><rect x="89.8193%" y="629" width="0.1271%" height="15" fill="rgb(223,33,50)" fg:x="28276" fg:w="40"/><text x="90.0693%" y="639.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for char&gt;::eq (52 samples, 0.17%)</title><rect x="89.9463%" y="629" width="0.1652%" height="15" fill="rgb(219,149,13)" fg:x="28316" fg:w="52"/><text x="90.1963%" y="639.50"></text></g><g><title>core::cmp::Ord::min (267 samples, 0.85%)</title><rect x="90.1115%" y="629" width="0.8481%" height="15" fill="rgb(250,156,29)" fg:x="28368" fg:w="267"/><text x="90.3615%" y="639.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (64 samples, 0.20%)</title><rect x="90.9596%" y="629" width="0.2033%" height="15" fill="rgb(216,193,19)" fg:x="28635" fg:w="64"/><text x="91.2096%" y="639.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (29 samples, 0.09%)</title><rect x="91.1661%" y="629" width="0.0921%" height="15" fill="rgb(216,135,14)" fg:x="28700" fg:w="29"/><text x="91.4161%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (29 samples, 0.09%)</title><rect x="91.2582%" y="629" width="0.0921%" height="15" fill="rgb(241,47,5)" fg:x="28729" fg:w="29"/><text x="91.5082%" y="639.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (27 samples, 0.09%)</title><rect x="91.3503%" y="629" width="0.0858%" height="15" fill="rgb(233,42,35)" fg:x="28758" fg:w="27"/><text x="91.6003%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (36 samples, 0.11%)</title><rect x="91.4361%" y="629" width="0.1144%" height="15" fill="rgb(231,13,6)" fg:x="28785" fg:w="36"/><text x="91.6861%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (26 samples, 0.08%)</title><rect x="91.5505%" y="629" width="0.0826%" height="15" fill="rgb(207,181,40)" fg:x="28821" fg:w="26"/><text x="91.8005%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (58 samples, 0.18%)</title><rect x="91.6330%" y="629" width="0.1842%" height="15" fill="rgb(254,173,49)" fg:x="28847" fg:w="58"/><text x="91.8830%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (124 samples, 0.39%)</title><rect x="91.8173%" y="629" width="0.3939%" height="15" fill="rgb(221,1,38)" fg:x="28905" fg:w="124"/><text x="92.0673%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (121 samples, 0.38%)</title><rect x="92.2112%" y="629" width="0.3844%" height="15" fill="rgb(206,124,46)" fg:x="29029" fg:w="121"/><text x="92.4612%" y="639.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (121 samples, 0.38%)</title><rect x="92.2112%" y="613" width="0.3844%" height="15" fill="rgb(249,21,11)" fg:x="29029" fg:w="121"/><text x="92.4612%" y="623.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (21 samples, 0.07%)</title><rect x="92.5955%" y="629" width="0.0667%" height="15" fill="rgb(222,201,40)" fg:x="29150" fg:w="21"/><text x="92.8455%" y="639.50"></text></g><g><title>[unknown] (2,549 samples, 8.10%)</title><rect x="85.2895%" y="645" width="8.0969%" height="15" fill="rgb(235,61,29)" fg:x="26850" fg:w="2549"/><text x="85.5395%" y="655.50">[unknown]</text></g><g><title>[ld-linux-x86-64.so.2] (4 samples, 0.01%)</title><rect x="93.3865%" y="645" width="0.0127%" height="15" fill="rgb(219,207,3)" fg:x="29399" fg:w="4"/><text x="93.6365%" y="655.50"></text></g><g><title>core::cmp::min_by (145 samples, 0.46%)</title><rect x="93.3992%" y="629" width="0.4606%" height="15" fill="rgb(222,56,46)" fg:x="29403" fg:w="145"/><text x="93.6492%" y="639.50"></text></g><g><title>[anon] (146 samples, 0.46%)</title><rect x="93.3992%" y="645" width="0.4638%" height="15" fill="rgb(239,76,54)" fg:x="29403" fg:w="146"/><text x="93.6492%" y="655.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (14 samples, 0.04%)</title><rect x="93.8661%" y="629" width="0.0445%" height="15" fill="rgb(231,124,27)" fg:x="29550" fg:w="14"/><text x="94.1161%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (14 samples, 0.04%)</title><rect x="93.8661%" y="613" width="0.0445%" height="15" fill="rgb(249,195,6)" fg:x="29550" fg:w="14"/><text x="94.1161%" y="623.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (170 samples, 0.54%)</title><rect x="93.9106%" y="629" width="0.5400%" height="15" fill="rgb(237,174,47)" fg:x="29564" fg:w="170"/><text x="94.1606%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (22 samples, 0.07%)</title><rect x="94.4506%" y="629" width="0.0699%" height="15" fill="rgb(206,201,31)" fg:x="29734" fg:w="22"/><text x="94.7006%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (30 samples, 0.10%)</title><rect x="94.5205%" y="629" width="0.0953%" height="15" fill="rgb(231,57,52)" fg:x="29756" fg:w="30"/><text x="94.7705%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (23 samples, 0.07%)</title><rect x="94.6158%" y="629" width="0.0731%" height="15" fill="rgb(248,177,22)" fg:x="29786" fg:w="23"/><text x="94.8658%" y="639.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (24 samples, 0.08%)</title><rect x="94.6889%" y="629" width="0.0762%" height="15" fill="rgb(215,211,37)" fg:x="29809" fg:w="24"/><text x="94.9389%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (29 samples, 0.09%)</title><rect x="94.7651%" y="629" width="0.0921%" height="15" fill="rgb(241,128,51)" fg:x="29833" fg:w="29"/><text x="95.0151%" y="639.50"></text></g><g><title>core::hash::sip::u8to64_le (36 samples, 0.11%)</title><rect x="94.8572%" y="629" width="0.1144%" height="15" fill="rgb(227,165,31)" fg:x="29862" fg:w="36"/><text x="95.1072%" y="639.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for char&gt;::hash (46 samples, 0.15%)</title><rect x="94.9716%" y="629" width="0.1461%" height="15" fill="rgb(228,167,24)" fg:x="29898" fg:w="46"/><text x="95.2216%" y="639.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (76 samples, 0.24%)</title><rect x="95.1177%" y="629" width="0.2414%" height="15" fill="rgb(228,143,12)" fg:x="29944" fg:w="76"/><text x="95.3677%" y="639.50"></text></g><g><title>core::hash::Hasher::write_u32 (27 samples, 0.09%)</title><rect x="95.3591%" y="629" width="0.0858%" height="15" fill="rgb(249,149,8)" fg:x="30020" fg:w="27"/><text x="95.6091%" y="639.50"></text></g><g><title>core::hash::BuildHasher::hash_one (25 samples, 0.08%)</title><rect x="95.4449%" y="629" width="0.0794%" height="15" fill="rgb(243,35,44)" fg:x="30047" fg:w="25"/><text x="95.6949%" y="639.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (55 samples, 0.17%)</title><rect x="95.5243%" y="629" width="0.1747%" height="15" fill="rgb(246,89,9)" fg:x="30072" fg:w="55"/><text x="95.7743%" y="639.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for char&gt;::eq (8 samples, 0.03%)</title><rect x="95.6990%" y="629" width="0.0254%" height="15" fill="rgb(233,213,13)" fg:x="30127" fg:w="8"/><text x="95.9490%" y="639.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (89 samples, 0.28%)</title><rect x="95.7244%" y="629" width="0.2827%" height="15" fill="rgb(233,141,41)" fg:x="30135" fg:w="89"/><text x="95.9744%" y="639.50"></text></g><g><title>[libc.so.6] (78 samples, 0.25%)</title><rect x="96.0071%" y="629" width="0.2478%" height="15" fill="rgb(239,167,4)" fg:x="30224" fg:w="78"/><text x="96.2571%" y="639.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (31 samples, 0.10%)</title><rect x="96.2549%" y="629" width="0.0985%" height="15" fill="rgb(209,217,16)" fg:x="30302" fg:w="31"/><text x="96.5049%" y="639.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (24 samples, 0.08%)</title><rect x="96.3534%" y="597" width="0.0762%" height="15" fill="rgb(219,88,35)" fg:x="30333" fg:w="24"/><text x="96.6034%" y="607.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (81 samples, 0.26%)</title><rect x="96.3534%" y="613" width="0.2573%" height="15" fill="rgb(220,193,23)" fg:x="30333" fg:w="81"/><text x="96.6034%" y="623.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (155 samples, 0.49%)</title><rect x="96.3534%" y="629" width="0.4924%" height="15" fill="rgb(230,90,52)" fg:x="30333" fg:w="155"/><text x="96.6034%" y="639.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (23 samples, 0.07%)</title><rect x="96.8457%" y="629" width="0.0731%" height="15" fill="rgb(252,106,19)" fg:x="30488" fg:w="23"/><text x="97.0957%" y="639.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (23 samples, 0.07%)</title><rect x="96.8457%" y="613" width="0.0731%" height="15" fill="rgb(206,74,20)" fg:x="30488" fg:w="23"/><text x="97.0957%" y="623.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (52 samples, 0.17%)</title><rect x="96.9188%" y="613" width="0.1652%" height="15" fill="rgb(230,138,44)" fg:x="30511" fg:w="52"/><text x="97.1688%" y="623.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (54 samples, 0.17%)</title><rect x="96.9188%" y="629" width="0.1715%" height="15" fill="rgb(235,182,43)" fg:x="30511" fg:w="54"/><text x="97.1688%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (39 samples, 0.12%)</title><rect x="97.0903%" y="629" width="0.1239%" height="15" fill="rgb(242,16,51)" fg:x="30565" fg:w="39"/><text x="97.3403%" y="639.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (168 samples, 0.53%)</title><rect x="97.2142%" y="613" width="0.5337%" height="15" fill="rgb(248,9,4)" fg:x="30604" fg:w="168"/><text x="97.4642%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (169 samples, 0.54%)</title><rect x="97.2142%" y="629" width="0.5368%" height="15" fill="rgb(210,31,22)" fg:x="30604" fg:w="169"/><text x="97.4642%" y="639.50"></text></g><g><title>[[stack]] (1,246 samples, 3.96%)</title><rect x="93.8630%" y="645" width="3.9579%" height="15" fill="rgb(239,54,39)" fg:x="29549" fg:w="1246"/><text x="94.1130%" y="655.50">[[st..</text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (22 samples, 0.07%)</title><rect x="97.7510%" y="629" width="0.0699%" height="15" fill="rgb(230,99,41)" fg:x="30773" fg:w="22"/><text x="98.0010%" y="639.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (22 samples, 0.07%)</title><rect x="97.7510%" y="613" width="0.0699%" height="15" fill="rgb(253,106,12)" fg:x="30773" fg:w="22"/><text x="98.0010%" y="623.50"></text></g><g><title>textdistance::algorithms::damerau_levenshtein::min4 (23 samples, 0.07%)</title><rect x="97.8209%" y="629" width="0.0731%" height="15" fill="rgb(213,46,41)" fg:x="30795" fg:w="23"/><text x="98.0709%" y="639.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (37 samples, 0.12%)</title><rect x="97.8940%" y="629" width="0.1175%" height="15" fill="rgb(215,133,35)" fg:x="30818" fg:w="37"/><text x="98.1440%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (26 samples, 0.08%)</title><rect x="98.0115%" y="629" width="0.0826%" height="15" fill="rgb(213,28,5)" fg:x="30855" fg:w="26"/><text x="98.2615%" y="639.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (23 samples, 0.07%)</title><rect x="98.0941%" y="629" width="0.0731%" height="15" fill="rgb(215,77,49)" fg:x="30881" fg:w="23"/><text x="98.3441%" y="639.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or (38 samples, 0.12%)</title><rect x="98.1671%" y="629" width="0.1207%" height="15" fill="rgb(248,100,22)" fg:x="30904" fg:w="38"/><text x="98.4171%" y="639.50"></text></g><g><title>core::hash::BuildHasher::hash_one (104 samples, 0.33%)</title><rect x="98.2879%" y="629" width="0.3304%" height="15" fill="rgb(208,67,9)" fg:x="30942" fg:w="104"/><text x="98.5379%" y="639.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (82 samples, 0.26%)</title><rect x="98.6182%" y="629" width="0.2605%" height="15" fill="rgb(219,133,21)" fg:x="31046" fg:w="82"/><text x="98.8682%" y="639.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (97 samples, 0.31%)</title><rect x="98.8787%" y="629" width="0.3081%" height="15" fill="rgb(246,46,29)" fg:x="31128" fg:w="97"/><text x="99.1287%" y="639.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (23 samples, 0.07%)</title><rect x="99.1868%" y="629" width="0.0731%" height="15" fill="rgb(246,185,52)" fg:x="31225" fg:w="23"/><text x="99.4368%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (23 samples, 0.07%)</title><rect x="99.2599%" y="629" width="0.0731%" height="15" fill="rgb(252,136,11)" fg:x="31248" fg:w="23"/><text x="99.5099%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (39 samples, 0.12%)</title><rect x="99.3329%" y="629" width="0.1239%" height="15" fill="rgb(219,138,53)" fg:x="31271" fg:w="39"/><text x="99.5829%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (128 samples, 0.41%)</title><rect x="99.4568%" y="629" width="0.4066%" height="15" fill="rgb(211,51,23)" fg:x="31310" fg:w="128"/><text x="99.7068%" y="639.50"></text></g><g><title>&lt;T as core::borrow::Borrow&lt;T&gt;&gt;::borrow (21 samples, 0.07%)</title><rect x="99.8634%" y="629" width="0.0667%" height="15" fill="rgb(247,221,28)" fg:x="31438" fg:w="21"/><text x="100.1134%" y="639.50"></text></g><g><title>all (31,481 samples, 100%)</title><rect x="0.0000%" y="677" width="100.0000%" height="15" fill="rgb(251,222,45)" fg:x="0" fg:w="31481"/><text x="0.2500%" y="687.50"></text></g><g><title>duplicate-detec (31,481 samples, 100.00%)</title><rect x="0.0000%" y="661" width="100.0000%" height="15" fill="rgb(217,162,53)" fg:x="0" fg:w="31481"/><text x="0.2500%" y="671.50">duplicate-detec</text></g><g><title>[[heap]] (686 samples, 2.18%)</title><rect x="97.8209%" y="645" width="2.1791%" height="15" fill="rgb(229,93,14)" fg:x="30795" fg:w="686"/><text x="98.0709%" y="655.50">[..</text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (22 samples, 0.07%)</title><rect x="99.9301%" y="629" width="0.0699%" height="15" fill="rgb(209,67,49)" fg:x="31459" fg:w="22"/><text x="100.1801%" y="639.50"></text></g></svg></svg>